http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;
  # group of servers used to proxy requests to using the proxy_pass directive
  upstream app_server {
      server backend:8080 fail_timeout=0;
      # server APP_SERVER_2_IP;
  }

  # The first server block captures requests that do not match our domain and terminates the connection
  # a direct HTTP request to our serverâ€™s IP address would be handled by this block.
  server {
      listen 80 default_server;
      return 444;
  }

  # this server block redirects HTTP requests to our domain to HTTPS using an HTTP 301 redirect
  server {
      listen 80;
      listen [::]:80;
      server_name poc-api.codolytics.com;
      return 301 https://$server_name$request_uri;
  }

  server {
      server_name poc-api.codolytics.com;

      client_max_body_size 4G;
      keepalive_timeout 5;
      # instructs Nginx to proxy requests to the upstream app_server servers over HTTP
      # It additionally preserves client HTTP headers that capture the originating
      # IP address, protocol used to connect, and target host
      location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://app_server;
      }
      listen 443 ssl http2;
      listen [::]:443 ssl http2;
      # SSL
      # ssl_certificate /etc/letsencrypt/live/poc-api.codolytics.com/fullchain.pem;
      # ssl_certificate_key /etc/letsencrypt/live/poc-api.codolytics.com/privkey.pem;
      # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
      # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
      # ACME-challenge
      # location ^~ /.well-known/acme-challenge/ {
      #     root /var/www/html;
      # }

  }
}